# -*- coding: utf-8 -*-
"""Machine Learning - Proyecto Inferencia de Ingresos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VPcH00TjuvW3gibfpN0FVSHP3GPq--v_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# **Nomina y Dataframe de Edesur.**

## Eliminacion de filas y Columnas Innecesarias.

### Filas.
"""

df_sur = pd.read_excel('edesur.xlsx')
df_sur

df_sur.drop([1, 2, 3, 4, 5], axis=0, inplace=True)
df_sur

df_sur.drop([0], axis=0, inplace=True)
df_sur

"""### Columnas."""

df_sur

columnas_no_deseadasS = ["Unnamed: 0", "Unnamed: 1", "Unnamed: 3", "Unnamed: 6" ,"Unnamed: 7","Unnamed: 11"]
columnas_deseadasS = [i for i in list(df_sur.columns) if i not in columnas_no_deseadasS]
df_sur = df_sur[columnas_deseadasS]
df_sur

"""##Renombrar Columnas."""

df_sur.columns

column_mapper = {
    'Unnamed: 2': 'Cargo',
    'Unnamed: 4': 'Tipo_Emp.',
    'Unnamed: 5': 'Genero',
    'Unnamed: 8': 'Ingreso_bruto',
    'Unnamed: 9': 'Descuento_afp',
    'Unnamed: 10': 'Descuento_ars',
    'Unnamed: 12':'Ingreso_neto'
}

df_sur = df_sur.rename(columns=column_mapper)
df_sur

"""## Modificacion del formato del contenido de la columnas."""

df_sur ["Cargo"] = df_sur ["Cargo"].str.capitalize()
df_sur ["Tipo_Emp."] = df_sur ["Tipo_Emp."].str.capitalize()
df_sur ["Genero"] = df_sur ["Genero"].str.capitalize()

df_sur["Tipo_Emp."] = df_sur["Tipo_Emp."].replace({'Fijo(a)': 'Fijo'})
df_sur

"""## Creacion de columnas nuevas."""

df_sur['Institucion'] = 'Edesur'
df_sur['Provincia'] = 'Distrito Nacional'
df_sur['Sector'] = 'Energetico'
df_sur['Des._Socioec.'] = 'Alto'
df_sur['Media_de_Salarios'] = 30000.00
df_sur['Cantidad_de_POI'] = 50
df_sur['Otros_descuentos'] = 0.0
df_sur

"""## Reordenamiento de las Columnas."""

df_sur = df_sur.reindex(['Institucion', 'Provincia', 'Sector', 'Des._Socioec.', 'Media_de_Salarios', 'Cantidad_de_POI', 'Cargo', 'Tipo_Emp.', 'Genero', 'Ingreso_bruto', 'Descuento_afp', 'Descuento_ars', 'Otros_descuentos', 'Ingreso_neto'], axis=1)
df_sur

"""## Modificacion del tipo de datos de las variables y verificacion de que no haya nulos."""

df_sur.dtypes

df_sur['Ingreso_bruto'] = df_sur['Ingreso_bruto'].astype(float)
df_sur['Descuento_afp'] = df_sur['Descuento_afp'].astype(float)
df_sur['Descuento_ars'] = df_sur['Descuento_ars'].astype(float)
df_sur['Ingreso_neto'] = df_sur['Ingreso_neto'].astype(float)
df_sur

df_sur.dtypes

df_sur.info()

df_sur.describe()

df_sur.isnull().sum().sort_values(ascending=False)

"""# **Nomina y DataFrame de Edenorte.**

## Eliminacion de filas y Columnas Innecesarias.

### Filas.
"""

df_norte = pd.read_excel('edenorte.xlsx')
df_norte

df_norte.drop([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], axis=0, inplace=True)
df_norte

df_norte.drop([0], axis=0, inplace=True)
df_norte

df_norte.drop([3039], axis=0, inplace=True)
df_norte

"""### Columnas."""

df_norte

columnas_no_deseadasN = ["Unnamed: 0", "Unnamed: 1", "Unnamed: 2", "Unnamed: 3", "Unnamed: 7", "Unnamed: 8", "Unnamed: 12", "Unnamed: 13", "Unnamed: 15"]
columnas_deseadasN = [i for i in list(df_norte.columns) if i not in columnas_no_deseadasN]
df_norte = df_norte[columnas_deseadasN]
df_norte

"""##Renombrar Columnas."""

df_norte.columns

column_mapper = {
    'Unnamed: 4': 'Cargo',
    'Unnamed: 5': 'Tipo_Emp.',
    'Unnamed: 6': 'Genero',
    'Unnamed: 9': 'Ingreso_bruto',
    'Unnamed: 10': 'Descuento_afp',
    'Unnamed: 11': 'Descuento_ars',
    'Unnamed: 14': 'Otros_descuentos',
    'Unnamed: 16': 'Ingreso_neto'
}

df_norte = df_norte.rename(columns=column_mapper)
df_norte

"""
## Modificacion del formato del contenido de las columnas."""

df_norte ["Cargo"] = df_norte ["Cargo"].str.capitalize()
df_norte

"""## Creacion de columnas nuevas."""

df_norte['Institucion'] = 'Edenorte'
df_norte['Provincia'] = 'Santiago'
df_norte['Sector'] = 'Energetico'
df_norte['Des._Socioec.'] = 'Medio'
df_norte['Media_de_Salarios'] = 22500.00
df_norte['Cantidad_de_POI'] = 40
df_norte

"""## Reordenamiento de las Columnas."""

df_norte = df_norte.reindex(['Institucion', 'Provincia', 'Sector', 'Des._Socioec.', 'Media_de_Salarios', 'Cantidad_de_POI', 'Cargo', 'Tipo_Emp.', 'Genero', 'Ingreso_bruto', 'Descuento_afp', 'Descuento_ars', 'Otros_descuentos', 'Ingreso_neto'], axis=1)
df_norte

"""## Modificacion del tipo de datos de las variables y verificacion de que no haya nulos."""

df_norte.dtypes

df_norte['Ingreso_bruto'] = df_norte['Ingreso_bruto'].astype(float)
df_norte['Descuento_afp'] = df_norte['Descuento_afp'].astype(float)
df_norte['Descuento_ars'] = df_norte['Descuento_ars'].astype(float)
df_norte['Ingreso_neto'] = df_norte['Ingreso_neto'].astype(float)
df_norte

df_norte.dtypes

df_norte.info()

df_norte.describe()

df_norte.isnull().sum().sort_values(ascending=False)

"""# **Nomina y DataFrame de Edeeste.**

## Eliminacion de filas y Columnas Innecesarias.

### Filas.
"""

df_este = pd.read_excel('edeeste.xlsx')
df_este

df_este.drop([1, 2, 3, 4, 5, 6], axis=0, inplace=True)
df_este

df_este.drop([0], axis=0, inplace=True)
df_este

"""### Columnas."""

df_este

columnas_no_deseadasE = ["Unnamed: 0","Unnamed: 2", "Unnamed: 4", "Unnamed: 5", "Unnamed: 6", "Unnamed: 10", "Unnamed: 11"]
columnas_deseadasE = [i for i in list(df_este.columns) if i not in columnas_no_deseadasE]
df_este = df_este[columnas_deseadasE]
df_este

"""##Renombrar Columnas."""

df_este.columns

column_mapper = {
    'Unnamed: 1': 'Cargo',
    'Unnamed: 3': 'Tipo_Emp.',
    'Unnamed: 7': 'Ingreso_bruto',
    'Unnamed: 8': 'Descuento_afp',
    'Unnamed: 9': 'Descuento_ars',
    'Unnamed: 12': 'Otros_descuentos',
    'Unnamed: 13': 'Ingreso_neto',
    'Unnamed: 14': 'Genero'
}

df_este = df_este.rename(columns=column_mapper)
df_este

"""
## Modificacion del formato del contenido de la columnas.
"""

df_este ["Tipo_Emp."] = df_este ["Tipo_Emp."].str.capitalize()
df_este

"""## Creacion de columnas nuevas."""

df_este['Institucion'] = 'Edeeste'
df_este['Provincia'] = 'Santo Domingo Este'
df_este['Sector'] = 'Energetico'
df_este['Des._Socioec.'] = 'Medio'
df_este['Media_de_Salarios'] = 24500.00
df_este['Cantidad_de_POI'] = 30
df_este

"""## Reordenamiento de las Columnas."""

df_este = df_este.reindex(['Institucion', 'Provincia', 'Sector', 'Des._Socioec.', 'Media_de_Salarios', 'Cantidad_de_POI', 'Cargo', 'Tipo_Emp.', 'Genero', 'Ingreso_bruto', 'Descuento_afp', 'Descuento_ars', 'Otros_descuentos', 'Ingreso_neto'], axis=1)
df_este

"""## Modificacion del tipo de datos de las variables y verificacion de que no haya nulos."""

df_este.dtypes

df_este['Ingreso_bruto'] = df_este['Ingreso_bruto'].astype(float)
df_este['Descuento_afp'] = df_este['Descuento_afp'].astype(float)
df_este['Descuento_ars'] = df_este['Descuento_ars'].astype(float)
df_este['Otros_descuentos'] = df_este['Otros_descuentos'].astype(float)
df_este['Ingreso_neto'] = df_este['Ingreso_neto'].astype(float)
df_este

df_este.dtypes

df_este.info()

df_este.describe()

df_este.isnull().sum().sort_values(ascending=False)

"""# **Nomina y Dataframe de Aduanas.**

## Eliminacion de filas y Columnas Innecesarias.

### Filas.
"""

df_aduanas = pd.read_excel('aduanas.xlsx')
df_aduanas

df_aduanas.drop([1, 2, 3, 4, 5], axis=0, inplace=True)
df_aduanas

df_aduanas.drop([0, 6, 7], axis=0, inplace=True)
df_aduanas

"""### Columnas."""

df_aduanas

columnas_no_deseadasA = ["Unnamed: 0", "Unnamed: 1", "Unnamed: 2", "Unnamed: 8", "Unnamed: 11", "Unnamed: 12", "Unnamed: 14", "Unnamed: 15"]
columnas_deseadasA = [i for i in list(df_aduanas.columns) if i not in columnas_no_deseadasA]
df_aduanas = df_aduanas[columnas_deseadasA]
df_aduanas

"""##Renombrar Columnas."""

df_aduanas.columns

column_mapper = {
    'Unnamed: 3': 'Cargo',
    'Unnamed: 4': 'Genero',
    'Unnamed: 5': 'Ingreso_bruto',
    'Unnamed: 6': 'Descuento_afp',
    'Unnamed: 7': 'Descuento_ars',
    'Unnamed: 9': 'Otros_descuentos',
    'Unnamed: 10': 'Ingreso_neto',
    'Unnamed: 13': 'Tipo_Emp.'
    }

df_aduanas = df_aduanas.rename(columns=column_mapper)
df_aduanas

"""## Modificacion del formato del contenido de la columnas."""

df_aduanas ["Cargo"] = df_aduanas ["Cargo"].str.capitalize()
df_aduanas ["Tipo_Emp."] = df_aduanas ["Tipo_Emp."].str.capitalize()
df_aduanas ["Genero"] = df_aduanas ["Genero"].str.capitalize()
df_aduanas

"""## Creacion de columnas nuevas."""

df_aduanas['Institucion'] = 'Aduanas'
df_aduanas['Provincia'] = 'Distrito Nacional'
df_aduanas['Sector'] = 'Gubernamental'
df_aduanas['Des._Socioec.'] = 'Alto'
df_aduanas['Media_de_Salarios'] = 37500.00
df_aduanas['Cantidad_de_POI'] = 20
df_aduanas

"""## Reordenamiento de las Columnas."""

df_aduanas = df_aduanas.reindex(['Institucion', 'Provincia', 'Sector', 'Des._Socioec.', 'Media_de_Salarios', 'Cantidad_de_POI', 'Cargo', 'Tipo_Emp.', 'Genero', 'Ingreso_bruto', 'Descuento_afp', 'Descuento_ars', 'Otros_descuentos', 'Ingreso_neto'], axis=1)
df_aduanas

"""## Modificacion del tipo de datos de las variables y verificacion de que no haya nulos."""

df_aduanas.dtypes

df_aduanas['Ingreso_bruto'] = df_aduanas['Ingreso_bruto'].astype(float)
df_aduanas['Descuento_afp'] = df_aduanas['Descuento_afp'].astype(float)
df_aduanas['Descuento_ars'] = df_aduanas['Descuento_ars'].astype(float)
df_aduanas['Otros_descuentos'] = df_aduanas['Otros_descuentos'].astype(float)
df_aduanas['Ingreso_neto'] = df_aduanas['Ingreso_neto'].astype(float)
df_aduanas

df_aduanas.dtypes

df_aduanas.info()

df_aduanas.describe()

df_aduanas.isnull().sum().sort_values(ascending=False)

"""# **Nomina y Dataframe del Ministerio de Obras Publicas y Comunicaciones.**

## Eliminacion de filas y Columnas Innecesarias.

### Filas.
"""

df_mopc = pd.read_excel('mopc.xlsx')
df_mopc

df_mopc.drop([0, 1, 2], axis=0, inplace=True)
df_mopc



"""### Columnas."""

df_mopc

columnas_no_deseadasM = ["MINISTERIO DE OBRAS PUBLICAS - MOPC", "Unnamed: 2","Unnamed: 6", "Unnamed: 10", "Unnamed: 11"]
columnas_deseadasM = [i for i in list(df_mopc.columns) if i not in columnas_no_deseadasM]
df_mopc = df_mopc[columnas_deseadasM]
df_mopc

"""##Renombrar Columnas."""

df_mopc.columns

column_mapper = {
    'MINISTERIO DE OBRAS PUBLICAS - MOPC ': 'nombre_completo',
    'Unnamed: 1': 'Cargo',
    'Unnamed: 3': 'Tipo_Emp.',
    'Unnamed: 4': 'Ingreso_bruto',
    'Unnamed: 5': 'Descuento_afp',
    'Unnamed: 7': 'Descuento_ars',
    'Unnamed: 8': 'Otros_descuentos',
    'Unnamed: 9': 'Ingreso_neto',
    'Unnamed: 12': 'Genero'
    }

df_mopc = df_mopc.rename(columns=column_mapper)
df_mopc

df_mopc.drop(columns=['nombre_completo'], inplace=True)
df_mopc

"""## Modificacion del formato del contenido de la columnas."""

df_mopc ["Cargo"] = df_mopc ["Cargo"].str.capitalize()
df_mopc ["Tipo_Emp."] = df_mopc ["Tipo_Emp."].str.capitalize()
df_mopc ["Genero"] = df_mopc ["Genero"].str.capitalize()

df_mopc["Genero"] = df_mopc["Genero"].replace({'F': 'Femenino', 'M': 'Masculino'})
df_mopc

"""## Creacion de columnas nuevas."""

df_mopc['Institucion'] = 'Mopc'
df_mopc['Provincia'] = 'Distrito Nacional'
df_mopc['Sector'] = 'Gubernamental'
df_mopc['Des._Socioec.'] = 'Alto'
df_mopc['Media_de_Salarios'] = 32500.00
df_mopc['Cantidad_de_POI'] = 20
df_mopc

"""## Reordenamiento de las Columnas."""

df_mopc = df_mopc.reindex(['Institucion', 'Provincia', 'Sector', 'Des._Socioec.', 'Media_de_Salarios', 'Cantidad_de_POI', 'Cargo', 'Tipo_Emp.', 'Genero', 'Ingreso_bruto', 'Descuento_afp', 'Descuento_ars', 'Otros_descuentos', 'Ingreso_neto'], axis=1)
df_mopc

"""## Modificacion del tipo de datos de las variables y verificacion de que no haya nulos."""

df_mopc.dtypes

df_mopc['Ingreso_bruto'] = df_mopc['Ingreso_bruto'].astype(float)
df_mopc['Descuento_afp'] = df_mopc['Descuento_afp'].astype(float)
df_mopc['Descuento_ars'] = df_mopc['Descuento_ars'].astype(float)
df_mopc['Otros_descuentos'] = df_mopc['Otros_descuentos'].astype(float)
df_mopc['Ingreso_neto'] = df_mopc['Ingreso_neto'].astype(float)
df_mopc

df_mopc.dtypes

df_mopc.info()

df_mopc.describe()

df_mopc.isnull().sum().sort_values(ascending=False)

"""# **Union de los DataFrames.**"""

full_df = pd.concat([df_sur, df_norte, df_este, df_aduanas, df_mopc], ignore_index=True)
full_df

full_df.info()

full_df.describe()

full_df.isnull().sum().sort_values(ascending=False)

full_df.dtypes

full_df['Otros_descuentos'] = full_df['Otros_descuentos'].astype(float)

full_df.dtypes

full_df.describe()

"""## Ingresos promedio por institucion."""

salario_promedio_por_institucion = full_df.groupby('Institucion')['Ingreso_bruto'].mean().reset_index()
salario_promedio_por_institucion

plt.figure(figsize=(8, 6))
plt.bar(salario_promedio_por_institucion['Institucion'], salario_promedio_por_institucion['Ingreso_bruto'], color=['blue', 'orange', 'green', 'yellow', 'red'])
plt.xlabel('Institucion')
plt.ylabel('Ingreso promedio')
plt.title('Ingreso promedio por institucion')
plt.show()

"""## Ingresos promedio por genero."""

salario_promedio_por_genero = full_df.groupby('Genero')['Ingreso_neto'].mean().reset_index()
salario_promedio_por_genero

plt.figure(figsize=(10, 6))
plt.bar(salario_promedio_por_genero['Genero'], salario_promedio_por_genero['Ingreso_neto'], color=['pink', 'blue'])
plt.xlabel('Genero')
plt.ylabel('Salario promedio')
plt.title('Salario promedio por genero')
plt.show()

"""## Ingresos promedio por Ciudad/Provincia."""

salario_promedio_por_provincia = full_df.groupby('Provincia')['Ingreso_neto'].mean().reset_index()
salario_promedio_por_provincia

plt.figure(figsize=(10, 6))
plt.bar(salario_promedio_por_provincia['Provincia'], salario_promedio_por_provincia['Ingreso_neto'], color=['blue', 'orange', 'green'])
plt.xlabel('Provincia')
plt.ylabel('Salario promedio')
plt.title('Salario promedio por provincia')
plt.show()

"""## Ingresos promedio por Sector."""

salario_promedio_por_sector = full_df.groupby('Sector')['Ingreso_neto'].mean().reset_index()
salario_promedio_por_sector

plt.figure(figsize=(8, 6))
plt.bar(salario_promedio_por_sector['Sector'], salario_promedio_por_sector['Ingreso_neto'], color=['green', 'blue'])
plt.xlabel('Sector')
plt.ylabel('Salario promedio')
plt.title('Salario promedio por Sector')
plt.show()

full_df['Tipo_Emp.'].value_counts()

"""# **Encoding & Scaling.**

## Encoding
"""

from sklearn.preprocessing import OneHotEncoder, StandardScaler

X = full_df.drop('Ingreso_neto', axis=1)
y = full_df['Ingreso_neto']

features_categoricos = X.select_dtypes(include="object").columns
features_numericos = X.select_dtypes(include="number").columns

encoder = OneHotEncoder()
df_encodeado = encoder.fit_transform(full_df[features_categoricos])
df_encodeado = pd.DataFrame(df_encodeado.toarray(), columns=encoder.get_feature_names_out())
df_encodeado

# encoder = OneHotEncoder()
# encoder.fit(full_df[features_categoricos])

# df_encodeado = pd.DataFrame(encoder.transform(X[features_categoricos]).toarray(), columns=encoder.get_feature_names_out())
# df_encodeado

X[features_categoricos]

X[features_numericos].describe()

"""## Scaling."""

scaler = StandardScaler()
df_escalado = scaler.fit_transform(full_df[features_numericos])
df_escalado = pd.DataFrame(df_escalado, columns=scaler.feature_names_in_)
df_escalado

# scaler = StandardScaler()
# scaler.fit(full_df[features_numericos])

# df_escalado = pd.DataFrame(scaler.transform(full_df[features_numericos]), columns=features_numericos)
# df_escalado

X = pd.concat([df_encodeado, df_escalado], axis=1)
X

"""# **Entrenamiento.**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import BayesianRidge
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import LinearSVR
from sklearn.ensemble import AdaBoostRegressor

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

modelos = [
    LinearRegression(),
    KNeighborsRegressor(),
    DecisionTreeRegressor(),
    RandomForestRegressor(),
    Ridge(),
    Lasso(),
    BayesianRidge(),
    LinearSVR(),
    AdaBoostRegressor(),
    MLPRegressor()
]

for modelo in modelos:
  modelo.fit(X_train, y_train)
  y_pred = pd.Series(modelo.predict(X_test))
  y_pred.index = y_test.index

  print(str(modelo))
  print("MAE: ", mean_absolute_error(y_test, y_pred))
  print("RMSE: ", np.sqrt(mean_squared_error(y_test, y_pred)))
  print("R2: ", r2_score(y_test, y_pred))
  print("")

#pd.Series(y_pred)

resultados = pd.concat([full_df.loc[y_test.index], pd.DataFrame(y_pred)], axis=1)
resultados.columns = list(full_df.columns)[:-1] + ['Ingreso_neto real','Ingreso_neto predicho']
resultados

(modelo.predict(X_test) - y_test).abs().mean()

"""# **Despliegue.**"""

import pickle

with open('modelopkl', 'wb') as archivo:
    pickle.dump(modelo[1], archivo)
modelo[1]